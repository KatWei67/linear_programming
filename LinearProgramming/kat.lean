import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Data.Matrix.Basic
import Mathlib.Data.Matrix.Reflection
import Mathlib.Data.Matrix.RowCol
import Mathlib.Algebra.BigOperators.Finprod
import Mathlib.Algebra.BigOperators.Basic
open BigOperators
open Finset
open Matrix

noncomputable section

def zero_vec(n: ‚Ñï ): Fin n ‚Üí ‚Ñù := Œª x => 0
variable {n m:‚Ñï} [NeZero m]

theorem dotProduct_comm' (x: Fin n ‚Üí ‚Ñù )(y: Fin n ‚Üí ‚Ñù): x ‚¨ù·µ• y = y ‚¨ù·µ• x := by
   apply Matrix.dotProduct_comm

def sumK (s : Fin m ‚Üí NNReal) (v : Fin m ‚Üí Fin n ‚Üí ‚Ñù)
:= ‚àë i: Fin m, s i ‚Ä¢ v i

-- Define K cone 1.2
variable (vmatrix : Fin m ‚Üí Fin n ‚Üí ‚Ñù)

def K: Set (Fin n ‚Üí ‚Ñù) := {x | ‚àÉ s, x = (sumK s vmatrix)}

def s_lambda(i : Fin m): (Fin m) ‚Üí NNReal:= Œª x =>
if x = i then 1 else 0

lemma t1(i: Fin m): s_lambda i i ‚Ä¢ vmatrix i = vmatrix i := by
  ext
  simp [s_lambda]

lemma t2(i: Fin m)(t: Fin m)(h: t ‚â† i): s_lambda i t  ‚Ä¢ vmatrix i = zero_vec n:= by
  ext x
  have: s_lambda i t = 0 := by
    ext
    simp [s_lambda]
    by_contra
    apply h
    assumption
  rw[this]
  rw[zero_vec]
  apply zero_mul

-- lemma partition_same (i': Fin m) :
-- ‚àë i : Fin m, s_lambda i' i ‚Ä¢ vmatrix i =
-- ‚àë i ‚àà {x | x < i' /\ x ‚àà Fin m}, s_lambda i' i ‚Ä¢ vmatrix i +
-- s_lambda i' i' ‚Ä¢ vmatrix i +
-- ‚àë i ‚àà {x | x > i' /\ x ‚àà Fin m}, s_lambda i' i ‚Ä¢ vmatrix i := by
-- sorry

-- all column vectors are in the cone

lemma vec_in_K(i': Fin m): vmatrix i' ‚àà K vmatrix:= by
  rw[K]
  use s_lambda i'
  unfold sumK
  unfold s_lambda
  simp


--Define K_polar 1.3
def K_polar: Set (Fin n ‚Üí ‚Ñù) :=
{y | ‚àÄ x ‚àà K vmatrix, y ‚¨ù·µ• x ‚â§ 0}

--Define K' dual cone 1.4
def K': Set (Fin n ‚Üí ‚Ñù) := {x | ‚àÄ i, (vmatrix i) ‚¨ù·µ• x ‚â§ 0}
#check K' vmatrix
--Define K_polar_pol 1.5 polar cone of a polar cone
def K_polar_pol: Set (Fin n ‚Üí ‚Ñù) :=
{x | ‚àÄ y ‚àà K_polar vmatrix, y ‚¨ù·µ• x ‚â§ 0 }

#check vec_in_K
theorem dual_eq_polar : K' vmatrix = K_polar vmatrix := by
   ext y
   constructor
   . intro hk'
     rw[K'] at hk'
     rw[K_polar]
     simp
     sorry

   . intro hy
     --have h1: ‚àÄ y ‚àà K, x ‚¨ù·µ• y ‚â§ 0 := by
     rw[K_polar] at hy
     rw [K']
     intro i
     have h: vmatrix i ‚àà K vmatrix := by
        exact vec_in_K vmatrix i
     have: ‚àÄ x ‚àà K vmatrix, y ‚¨ù·µ• x ‚â§ 0 := by
       exact hy
     apply this at h
     rw[dotProduct_comm']
     exact h



theorem cone_eq_polar_pol: K vmatrix = K_polar_pol vmatrix:= by
  sorry




-- 1.9
-- First, Take any two points x, y ‚àà K. For any scalar Œª such that 0 ‚â§ Œª ‚â§ 1,
-- we need to show that Œªx + (1 ‚àí Œª)y ‚àà K
set_option checkBinderAnnotations false
def convex (ùïú : Type u) (s : Set E) :Prop := by exact PEmpty.{0}












-- Lemma 1.6
-- Farkas' Lemma
-- Define mathematical conditions
variable {m n : ‚Ñï}
variable (A : Matrix (Fin m) (Fin n) ‚Ñù) (c : (Fin n) ‚Üí ‚Ñù)

def all_non_positive (v : (Fin m) ‚Üí ‚Ñù) : Prop :=
  ‚àÄ i, v i ‚â§ 0

def all_non_negative (v : (Fin m) ‚Üí ‚Ñù) : Prop :=
  ‚àÄ i, v i ‚â• 0

-- Define the conditions of Farkas' Lemma
def system_one_has_solution (A : Matrix (Fin m) (Fin n) ‚Ñù) (c : (Fin n) ‚Üí ‚Ñù) : Prop :=
  ‚àÉ x : (Fin n) ‚Üí ‚Ñù, all_non_positive (A *·µ• x) ‚àß c * x > 0

def system_two_has_solution (A : Matrix (Fin m) (Fin n) ‚Ñù) (c : (Fin n) ‚Üí ‚Ñù) : Prop :=
  ‚àÉ lambda : (Fin m) ‚Üí ‚Ñù, (transpose A) *·µ• lambda = c ‚àß all_non_negative lambda

